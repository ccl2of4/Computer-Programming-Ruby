As far as the UI goes, it seems to be perfectly fine for what it's supposed to accomplish. My only complaint with navigating the application was that there wasn't an easy way to run a bunch of games really fast to test my player (maybe there could be a replay/play again button on the result details screen that would just run the same game with the same agents again).

The application does exactly what it is intended to do: it translates model into views. If you go to results, you see the results table laid out as a view; if you click on the ID of a result, you see the participants table (although this isn't completely obvious as it's not explicitly labeled "participants"). There really isn't anything to improve on as far as displaying the model goes. It's all there and it is displayed correctly.

I mentioned this in class, but I do still think it's a little funny how you have to delete all results records associated with a given agent before you can delete that agent. I understand the concept of orphaned data (and how that's what blind deletion of an agent record could cause), and I also understand how a cascading delete could be troublesome (because it would delete records associated with agents other than the one being deleted). However, regardless of what method is chosen, the fact remains that the deletion of a record affects TWO agents rather than one (well, it technically affects as many agents as are involved in the given game). I really do feel, though, that neither the current solution nor implementing a cascading delete would really satisfy all parties. I can't think of a better solution than the one being used currently, and I can't think of a way to change the model to simply eliminate the problem, but something tells me there's something better that could be done for this little issue.
